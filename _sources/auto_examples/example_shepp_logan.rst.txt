
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/example_shepp_logan.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_example_shepp_logan.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_example_shepp_logan.py:


Generate a 2D+t simple simulation
=================================

Example of simulation generation.

.. GENERATED FROM PYTHON SOURCE LINES 7-18

.. code-block:: default


    import matplotlib.pyplot as plt

    from simfmri.simulator import SimulationData
    from simfmri.simulator import (
        SheppLoganGeneratorHandler,
        ActivationHandler,
        AcquisitionHandler,
        KspaceNoiseHandler,
    )








.. GENERATED FROM PYTHON SOURCE LINES 19-20

We are going to simulate a 2D+t fMRI scan of a phantom with activations. .

.. GENERATED FROM PYTHON SOURCE LINES 20-25

.. code-block:: default

    shape = (64, 64, 64)
    n_frames = 50
    TR = 1.0
    n_coils = 1








.. GENERATED FROM PYTHON SOURCE LINES 26-28

Moreover, for the acquisition we are going to specify the acceleration factor
and the signal to noise ratio

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: default


    accel = 2
    snr = 100








.. GENERATED FROM PYTHON SOURCE LINES 33-35

This data is used to createa the main SimulationData object, which gather
all the data related to this simulation

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default


    sim_data = SimulationData(shape=shape, n_frames=n_frames, TR=1, n_coils=1)

    print(sim_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    SimulationData: 
    SimulationParams(shape=(64, 64, 64), n_frames=50, TR=1, n_coils=1)
    data_ref: None
    data_acq: None
    kspace_data: None
    kspace_mask: None
    roi: None





.. GENERATED FROM PYTHON SOURCE LINES 41-48

Then we are going to build the simulator from elementary steps,
which all *handles* a particular aspect of the simulation.

The handlers can be chained easily by using the `@` operator (or by setting the
``next`` attribute of an Handler)
Some handlers comes with preset function to ease their creation.


.. GENERATED FROM PYTHON SOURCE LINES 49-62

.. code-block:: default


    simulator = (
        # Create a shepp logan phantom
        SheppLoganGeneratorHandler()
        # Add activations (and creates a time dimension)
        @ ActivationHandler.from_block_design(3, 3, n_frames)
        # simulate the acquisition
        @ AcquisitionHandler.vds(acs=24, accel=accel, constant=True, gen_smaps=False)
        # add noise to the kspace
        @ KspaceNoiseHandler(snr=snr)
    )

    print(simulator.get_chain())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    SheppLoganGeneratorHandler->ActivationHandler->AcquisitionHandler->KspaceNoiseHandler->




.. GENERATED FROM PYTHON SOURCE LINES 63-82

.. code-block:: default



    def print_callback(old_sim, new_sim):
        print(old_sim)
        print("->")
        print(new_sim)


    cur = simulator
    while cur is not None:
        cur.add_callback(print_callback)
        cur = cur.prev

    sim_data = simulator(sim_data)
    print(sim_data)

    plt.imshow(abs(sim_data.data_ref[0][32]))
    plt.axis("off")
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_example_shepp_logan_001.png
   :alt: example shepp logan
   :srcset: /auto_examples/images/sphx_glr_example_shepp_logan_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    SimulationData: 
    SimulationParams(shape=(64, 64, 64), n_frames=50, TR=1, n_coils=1)
    data_ref: None
    data_acq: None
    kspace_data: None
    kspace_mask: None
    roi: None

    ->
    SimulationData: 
    SimulationParams(shape=(64, 64, 64), n_frames=50, TR=1, n_coils=1)
    data_ref: float32((50, 64, 64, 64))
    data_acq: float32((50, 64, 64, 64))
    kspace_data: None
    kspace_mask: None
    roi: bool((64, 64, 64))

    SimulationData: 
    SimulationParams(shape=(64, 64, 64), n_frames=50, TR=1, n_coils=1)
    data_ref: float32((50, 64, 64, 64))
    data_acq: float32((50, 64, 64, 64))
    kspace_data: None
    kspace_mask: None
    roi: bool((64, 64, 64))

    ->
    SimulationData: 
    SimulationParams(shape=(64, 64, 64), n_frames=50, TR=1, n_coils=1)
    data_ref: float32((50, 64, 64, 64))
    data_acq: float32((50, 64, 64, 64))
    kspace_data: None
    kspace_mask: None
    roi: bool((64, 64, 64))

    SimulationData: 
    SimulationParams(shape=(64, 64, 64), n_frames=50, TR=1, n_coils=1)
    data_ref: float32((50, 64, 64, 64))
    data_acq: float32((50, 64, 64, 64))
    kspace_data: None
    kspace_mask: None
    roi: bool((64, 64, 64))

    ->
    SimulationData: 
    SimulationParams(shape=(64, 64, 64), n_frames=50, TR=1, n_coils=1)
    data_ref: float32((50, 64, 64, 64))
    data_acq: float32((50, 64, 64, 64))
    kspace_data: complex64((50, 64, 64, 64))
    kspace_mask: float64((50, 64, 64, 64))
    roi: bool((64, 64, 64))

    SimulationData: 
    SimulationParams(shape=(64, 64, 64), n_frames=50, TR=1, n_coils=1)
    data_ref: float32((50, 64, 64, 64))
    data_acq: float32((50, 64, 64, 64))
    kspace_data: complex64((50, 64, 64, 64))
    kspace_mask: float64((50, 64, 64, 64))
    roi: bool((64, 64, 64))

    ->
    SimulationData: 
    SimulationParams(shape=(64, 64, 64), n_frames=50, TR=1, n_coils=1)
    data_ref: float32((50, 64, 64, 64))
    data_acq: float32((50, 64, 64, 64))
    kspace_data: complex64((50, 64, 64, 64))
    kspace_mask: float64((50, 64, 64, 64))
    roi: bool((64, 64, 64))

    SimulationData: 
    SimulationParams(shape=(64, 64, 64), n_frames=50, TR=1, n_coils=1)
    data_ref: float32((50, 64, 64, 64))
    data_acq: float32((50, 64, 64, 64))
    kspace_data: complex64((50, 64, 64, 64))
    kspace_mask: float64((50, 64, 64, 64))
    roi: bool((64, 64, 64))






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.634 seconds)


.. _sphx_glr_download_auto_examples_example_shepp_logan.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_shepp_logan.py <example_shepp_logan.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_shepp_logan.ipynb <example_shepp_logan.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
